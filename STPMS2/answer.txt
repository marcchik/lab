1. Что такое .Net Framework и из чего он состоит?

.NET Framework — программная платформа, выпущенная компанией Microsoft в 2002 году. Основой платформы является общеязыковая среда исполнения Common Language Runtime (CLR), которая подходит для разных языков программирования. Функциональные возможности CLR доступны в любых языках программирования, использующих эту среду. Содержит следующие основные компоненты:
►CLR (Common Language Runtime) – общеязыковая среда исполнения, виртуальная машина на которой исполняются все приложения, работающие в среде .NET. Реализация CLI VES компанией Microsoft.
►Компилятор JIT(Just in Time). MSIL(Microsoft IL) – реализация CLI CIL компанией ►Microsoft. FCL (Framework Class Library) – реализация CLI BCL компанией Microsoft. Можно рассматривать, как API CRL. 

2. Что такое CLR, FCL/BCL, CLI, IL?

► CLR (Common Language Runtime) – Среда Времени Выполнения или Виртуальная Машина. Обеспечивает выполнение сборки (управление памятью, загрузка сборок, безопасность, обработка исключений, синхронизация) 

► FCL (.NET Framework Class Library) – соответствующая CLS спецификации объектно-ориентированная библиотека классов, интерфейсов и системы типов (типов-значений),
реализация CLI BCL компанией Microsoft.

► CLI (Common Language Infrastructure) – спецификация общеязыковой инфраструктуры. Определяет архитектуру исполнительной системы и набор представляемых сервисов. Стандарты: ECMA-335 и ISO/IEC 23271. 

► IL объектно-ориентированный машинный язык не зависящий от процессора 

3. Пояснить работу JIT-компилятора?
JIT-компилятор (Just-In-Time)
1) CLR ищет типы данных и загружает во внутренние структуры
2) Для каждого метода CLR заносит адрес внутренней CLR функции JITCompiler
3) JITCompiler ищет в метаданных соответствующей сборки IL-код вызываемого метода, проверяет и компилирует IL-код в машинные команды
4) Они хранятся в динамически выделенном блоке памяти.
5) JITCompiler заменяет адрес вызываемого метода адресом блока памяти, содержащего готовые машинные команды
6) JITCompiler передает управление коду в этом блоке памяти.

4. Что такое CTS (Common Type System)?
CTS (Common Type Systems)- спецификацию типов, которые должны поддерживаться  всеми языками ориентированными на CLR.    Microsoft выпустил несколько компиляторов соответствующих этой спецификации: С++/CLI (C++  с управляемыми расширениями), С#, VB .NET, JScript.


5. Какие аспекты поведения определяет  тип System.Object?
В CLR каждый объект прямо или косвенно является производным от System.Object 
Все остальные классы в .NET, даже те, которые мы сами создаем, а также базовые типы, такие как System.Int32, являются неявно производными от класса Object. Даже если мы не указываем класс Object в качестве базового, по умолчанию неявно класс Object все равно стоит на вершине иерархии наследования. Поэтому все типы и классы могут реализовать те методы, которые определены в классе System.Object. 
Имеет некоторые методы: 
Метод ToString служит для получения строкового представления данного объекта. 
Метод GetHashCode позволяет возвратить некоторое числовое значение, которое будет соответствовать данному объекту или его хэш-код. 
Метод GetType позволяет получить тип данного объекта.
Метод Equals позволяет сравнить два объекта на равенство.
Метод Equals принимает в качестве параметра объект любого типа, который мы затем приводим к текущему, если они являются объектами одного класса. Затем сравниваем по именам. Если имена равны, возвращаем true, что будет говорить, что объекты равны. Однако при необходимости реализацию метода можно сделать более сложной, например, сравнивать по нескольким свойствам при их наличии. 

6. Что находится в mscorlib dll?

Ядро среды выполнения.

7.Что такое «сборка»? Из чего состоит сборка .NET? 
 Сборка (assembly) —
► 1) это абстрактное понятие, для логической группировки одного или нескольких управляемых модулей или файлов ресурсов.
► 2) дискретная единица многократно используемого кода внутри CLR

Сборка - это логическая структурная единица .NET приложений. Обычно сборка действительно представляет из себя один EXE или DLL файл, но в общем случае может состоять и из нескольких файлов. 

Сборки имеют следующие составляющие:
•	Манифест, который содержит метаданные сборки
•	Метаданные типов. Используя эти метаданные, сборка определяет местоположение типов в файле приложения, а также места размещения их в памяти
•	Собственно код приложения на языке MSIL, в который компилируется код C#
•	Ресурсы

8.  Какие виды сборок существуют?

►с нестрогими именами (weakly named assemblies) 
► со строгими именами (strongly named assemblies). 

 подписаны при помощи пары ключей, уникально идентифицирующей издателя сборки (безопасность, управление ее версиями, развертывание в любом месте пользовательского жесткого диска или в Интернете)  атрибуты: имя файла (без расширения), номер версии, идентификатор регионального стандарта и открытый ключ.

9. Что такое assembly manifest?
Манифест - набор таблиц метаданных файлы, которые входят в сборку, общедоступные  экспортируемые типы, файлы ресурсов или данных

10. Что такое GAC?
GAC — (Global Assembly Cache) — в инфраструктуре .NET — подсистема, хранящая сборки CLI (CLI assembly) в централизованном репозитории.  Общие сборки хранятся в GAC – global access cache. 

11. Чем managed code отличается от unmanaged code
Управляемый код – автоматическая сборка мусора. Можно просто создавать объекты.
Неуправляемый код – нужно удалять объекты в ручную.
В первом приближении управляемым кодом называется код, выполнение которого управляется средой выполнения. В этом случае соответствующая среда выполнения называется общеязыковой средой выполнения или средой CLR, независимо от реализации (Mono, .NET Framework или .NET Core). Среда CLR отвечает за использование управляемого кода, его компиляцию в машинный код и последующее выполнение.Кроме того, среда выполнения предоставляет несколько важных служб, таких как автоматическое управление памятью, границы безопасности, безопасность типа и т. д.

12. Как и для чего определен метод Main?
Main определен как точка входа в программу. Именно с него начинается выполнение кода.

13. Варианты использования директивы using( using Directive ) в C#.
Директива using включает в код библиотеки, 
разрешает использование типов в пространстве имен( поэтому уточнение использования типа в этом пространстве имен не требуется  ), позволяет создавать псевдонимы пространства имен или типа.

14. Как связаны между собой сборки и пространства имен?

15. Что такое примитивные типы данных? Перечислите их.
Примитивные типы данных – это базовые типы данных языка программирования. Их ключевая особенность в том, что данные в них, в отличие от ссылочных типов, располагаются непосредственно [“в переменной”.] на участке памяти компьютера в котором находится переменная. 

►Типы данных, которые поддерживаются компилятором напрямую, называются примитивными (primitive types) или встроенными у них существуют прямые аналоги в библиотеке классов .NET Framework Class Library 
Числовые типы (byte..double и decimal);
	bool;
	string;
	object;
	dynamic.

16. Что такое ссылочные типы? Какие типы относятся к ним?
 В переменных ссылочных типов хранятся ссылки на их данные (объекты).
В C# также предусмотрены следующие встроенные ссылочные типы:
•	dynamic
•	object
•	string

17. Какие типы относятся к типам-значениям?
Целочисленные типы (byte, sbyte, short, ushort, int, uint, long, ulong)
•	Типы с плавающей запятой (float, double)
•	Тип decimal
•	Тип bool
•	Тип char
•	Перечисления enum
•	Структуры (struct)

18.  В чем отличие между ссылочными и значимыми типами данных?
Значимые типы хранят значение, а ссылочные - ссылку на значение. 
Главное отличие - это где храниться значение переменной. Для ссылочных типов - это куча, для значимых - это стек. При этом, ссылочная переменная (сама ссылка) храниться на стеке 

19. Что такое упаковка и распаковка значимых типов?
► Упаковкой (boxing) называется процесс преобразования типа значения в тип System.Object или в тип интерфейса, который реализуется данным типом значением.

► распаковка (unboxing) получение указателя на исходный значимый тип (поля данных), содержащийся в объекте 

20. В чем заключается разница между int и System.Int32? double и System.Double и т.д.?
Разницы нет, так как первое в принципе является просто псевдонимом второго. 

21. Для чего используется тип dynamic?
Dynamic - динамический тип данных. Это такой тип данных, который не имеет привязанного типа и в любой момент может быть переопределен другим типом. 
Используется, если нужно выполнить разные реализации относительно типа данных переменной. Для сокращения кода можно использовать dynamic c операторами сравнения. Однако этот тип очень ресурсозатратный.

►Назначение : ► Отражения или коммуникации с другими компонентами 
Использование:  для членов класса - поля, свойства/индексаторы, структур , для метода, делегата, или унарных/бинарных операторов 

22. В чем заключается главное отличие между var и dynamic?
динамическая переменная и переменная var могут хранить любой тип значения, но его необходимо инициализировать " var " во время объявления.
компилятор не имеет никакой информации о "динамическом" типе переменной. var-безопасный компилятор i.e компилятор имеет всю информацию о сохраненном значении, так что это не вызывает никаких проблем во время выполнения.

23. Что такое неявно типизированная переменная?
Неявная типизация — типизация, при которой переменная остается строго типизированной, а её тип определяется компилятором, исходя из присваиваемого значения. 
при компиляции компилятор сам выводит тип данных исходя из присвоенного значения 
► неявно типизированные локальные переменные не допускают множественного объявления 

24. Для чего используют Nullable тип?
Чтобы сделать возможным для значимых типов принимать значение null, нужно использовать специальную конструкцию — тип, допускающий значение null (nullable type). Чтобы превратить значимый тип в тип, допускающий значение null, нужно при объявлении переменной непосредственно после указания ее (значимого) типа поставить знак ?: 

1
2	string s = null; // Допустимо, строка - ссылочный тип
int i = null; // Ошибка при компиляции - int не может иметь значение null

25. Как объявить строковый литерал? Какие операции можно выполнять со строкой?
► Поставить ещё один символ обратной косой черты (“\\”); ► Предварить строковый литерал символом ‘@’; ► В случае, если литерал есть путь к файлу (локальный или сетевой), каталогу или web-странице, можно использовать альтернативный символ '/' вместо “\\”. 

Операции для строк
► присваивание (=);
► проверка на равенство содержимого (==);
► проверка на неравенство (!=);
► обращение по индексу ([]);
► сцепление (конкатенация) строк (+)
► <,>, >=,<= - сравнивают ссылки!!!!!!!!

 Строки равны, если имеют одинаковое количество символов и совпадают посимвольно.  Обращаться к отдельному элементу строки по индексу можно только для получения значения, но не для его изменения.
 строки типа string относятся к неизменяемым типам данных.
 Методы, изменяющие содержимое строки, на самом деле создают новую копию строки. Неиспользуемые «старые» копии автоматически удаляются сборщиком мусора. 

26. Какие есть способы для задания и инициализации строк?
Создавать строки можно, как используя переменную типа string и присваивая ей значение, так и применяя один из конструкторов класса String: 
string s1 = "hello";
string s2 = null;
 
string s3 = new String('a', 6); // результатом будет строка "aaaaaa"
string s4 = new String(new char[]{'w', 'o', 'r', 'l', 'd'});

27. Какие методы есть у типа String?
Основные методы строк
Основная функциональность класса String раскрывается через его методы, среди которых можно выделить следующие:
•	Compare: сравнивает две строки с учетом текущей культуры (локали) пользователя
•	CompareOrdinal: сравнивает две строки без учета локали
•	Contains: определяет, содержится ли подстрока в строке
•	Concat: соединяет строки
•	CopyTo: копирует часть строки, начиная с определенного индекса в массив
•	EndsWith: определяет, совпадает ли конец строки с подстрокой
•	Format: форматирует строку
•	IndexOf: находит индекс первого вхождения символа или подстроки в строке
•	Insert: вставляет в строку подстроку
•	Join: соединяет элементы массива строк
•	LastIndexOf: находит индекс последнего вхождения символа или подстроки в строке
•	Replace: замещает в строке символ или подстроку другим символом или подстрокой
•	Split: разделяет одну строку на массив строк
•	Substring: извлекает из строки подстроку, начиная с указанной позиции
•	ToLower: переводит все символы строки в нижний регистр
•	ToUpper: переводит все символы строки в верхний регистр
•	Trim: удаляет начальные и конечные пробелы из строки

28. В чем отличие пустой и null строки?
► Пустая строка — экземпляр объекта System.String, содержащий 0 символов: string s = ""; Для пустых строк можно вызывать методы.
► Строки со значениями null не ссылаются на экземпляр объекта System.String, попытка вызвать метод для строки null вызовет исключение NullReferenceException. строки null можно использовать в операциях объединения и сравнения с другими строками.

29. Как можно выполнить сравнение строк?
В C# правильно сравнивать строки и через ==, и через Equals. Но более предпочтительным будет сравнивать через == 
Метод Equals подразумевает сравнение значений объектов ссылочного типа, он объявлен как virtual и для строк он перегружен и сравнивает их, как и предполагается, по значению. В Ваших классах Вы должны давать свою реализацию для него. Иначе он будет вести себя как ReferenceEquals и для ссылок, которые указывают не на один объект будет давать false, хоть они и будут равны по значению.
Оператор == для строк представляют свою реализацию, отличную от стандартной для всех других объектов ссылочного типа. Если сравниваемые ссылки имеют тип System.String, то он сначала сравнит указывают ли ссылки на один тот же объект и если нет, то будет сравнивать две ссылки типа System.String по значению.

30. В чем отличие типов String и StringBuilder?
Основное отличие - StringBuilder можно изменять после создания. 
String – неизменяемая строка.
StringBuilder – изменяемая строка с высокой производительностью, но без синхронизации.


31. Поясните явные преобразования переменных с помощью команд Convert.
Класс Convert представляет еще один способ для преобразования значений. Для этого в нем определены следующие статические методы:
•	ToBoolean(value)
•	ToByte(value)
•	ToChar(value)
•	ToDateTime(value)
•	ToDecimal(value)
•	ToDouble(value)
•	ToInt16(value)
•	ToInt32(value)
•	ToInt64(value)
•	ToSByte(value)
•	ToSingle(value)
•	ToUInt16(value)
•	ToUInt32(value)
•	ToUInt64(value)
В качестве параметра в эти методы может передаваться значение различных примитивных типов, необязательно строки:

1
2
3
4	int n = Convert.ToInt32("23");
bool b = true;
double d = Convert.ToDouble(b);
Console.WriteLine($"n={n}  d={d}");
Однако опять же, как и в случае с методом Parse, если методу не удастся преобразовать значение к нужному типу, то он выбрасывает исключение FormatException. 

32. Как выполнить консольный ввод/вывод?
С помощью Console.WriteLine() и Console.ReadLine();

33. Приведите примеры определения и инициализации одномерных и двумерных массивов.

Массив — это структура данных, содержащая несколько переменных, доступ к которым осуществляется по вычисляемым индексам. Содержащиеся в массиве переменные именуются элементами этого массива. Все они имеют одинаковый тип, который называется типом элементов массива. В C# массивы могут быть как одномерными, так и многомерными. 

// Объявление массива
<тип>[] <имя>;
Многомерный массив содержит два или больше измерений, причем доступ к каждому элементу такого массива осуществляется с помощью определенной комбинации двух или более индексов. 

Всевозможные определения двумерных массивов
int[,] nums1;
int[,] nums2 = new int[2, 3];
int[,] nums3 = new int[2, 3] { { 0, 1, 2 }, { 3, 4, 5 } };
int[,] nums4 = new int[,] { { 0, 1, 2 }, { 3, 4, 5 } };
int[,] nums5 = new [,]{ { 0, 1, 2 }, { 3, 4, 5 } };
int[,] nums6 = { { 0, 1, 2 }, { 3, 4, 5 } };


34. Что такое ступенчатый массив? Как его задать?
Ступенчатые массивы. Ступенчатый массив – это массив массивов, в котором длина каждого массива может быть разной. 
Ступенчатый массивы объявляются с помощью ряда квадратных скобок, в которых указывается их размерность. Например, для объявления двумерного ступенчатого массива служит следующая общая форма: 
 тип [][] имя массива = new тип[размер] [];

Пример:

 int i = 0;
            // Объявляем ступенчатый массив
            // В нем будет три массива длиной, соответственно,
            // 3, 5 и 4 элемента
            int[][] myArr = new int[3][];
            myArr[0] = new int[3];
            myArr[1] = new int[5];
            myArr[2] = new int[4];

            // Инициализируем ступенчатый массив
            for (; i < 3; i++)
            {
                myArr[0][i] = i;
                Console.Write("{0}\t", myArr[0][i]);
            }

            Console.WriteLine();
            for (i = 0; i < 5; i++)
            {
                myArr[1][i] = i;
                Console.Write("{0}\t", myArr[1][i]);
            }
            Console.WriteLine();
            for (i = 0; i < 4; i++)
            {
                myArr[2][i] = i;
                Console.Write("{0}\t", myArr[2][i]);
            }


35. Какие типы можно использовать в foreach? Приведите пример.
Оператор цикла foreach предназначен для перебора элементов коллекции или массива.
Использовать можно любой тип, у которого есть метод GetEnumerator(), возвращающий объект, который, в свою очередь, реализует метод MoveNext и свойство Current. Другими словами – в foreach можно использовать любой тип, если он реализует интефейс IEnumerable с методом GetNumerator, который возвращает любой объект, реализующий IEnumerator. 

static void Main(string[] args)
{
   int[] numbers = { 4, 7, 13, 20, 33, 23, 54 };
   int s = 0;

   foreach (int el in numbers)
   {
     s += el;
   }
   Console.WriteLine(s);
   Console.ReadKey();
} 



36. Что такое кортеж? Для чего и как он используется?
Кортежи (tuple) комбинируют объекты различных типов (от одного до восьми). 
Свойства:
►создается один раз и остается неименным (все свойства доступны только для чтения) ►позволяют использовать методы CompareTo, Equals, GetHashCode и ToString, свойство Size ►реализуют интерфейсы IStructuralEquatable, IStructuralComparable и IComparable (можно сравнивать) 

Кортежи - значимый тип, System.ValueTuple. элементы - открытые поля, могут сравниваться на равенство, присвоится др.др 

37. Что такое локальная функция?  Какова область ее видимости?
Область видимости локальной функции это блок кода в котором она обьявлена. Т.е. она «не существует» за пределами {} в которых объявлена. 

►вспомогательная функция - внутри метода, в котором вызывается 

38.  В чем разница между кодом, заключенным в блок checked и кодом, заключенным в блок unchecked?
В C# имеется специальное средство, связанное с генерированием исключений, возникающих при переполнении в арифметических вычислениях. Как известно, результаты некоторых видов арифметических вычислений могут превышать диапазон представления чисел для типа данных, используемого в вычислении. В этом случае происходит так называемое переполнение.
В C# допускается указывать, будет ли в коде сгенерировано исключение при переполнении, с помощью ключевых слов checked и unchecked. Так, если требуется указать, что выражение будет проверяться на переполнение, следует использовать ключевое слово checked, а если требуется проигнорировать переполнение — ключевое слово unchecked. В последнем случае результат усекается, чтобы не выйти за пределы диапазона представления чисел для целевого типа выражения.
У ключевого слова checked имеются две общие формы. В одной форме проверяется конкретное выражение, и поэтому она называется операторной. А в другой форме проверяется блок операторов, и поэтому она называется блочной.
Если вычисление проверяемого выражения приводит к переполнению, то генерируется исключение OverflowException.
У ключевого слова unchecked также имеются две общие формы. В первой, операторной форме переполнение игнорируется при вычислении конкретного выражения. А во второй, блочной форме оно игнорируется при выполнении блока операторов
Если же в непроверяемом выражении происходит переполнение, то результат его вычисления усекается. 

39. Какой контекст (checked/unchecked) применяется по умолчанию? Как можно переопределить это поведение?

Потребность в применении ключевого слова checked или unchecked может возникнуть, в частности, потому, что по умолчанию проверяемое или непроверяемое состояние переполнения определяется путем установки соответствующего параметра компилятора и настройки самой среды выполнения. Поэтому в некоторых программах состояние переполнения лучше проверять явным образом. 
Проще говоря, unchecked не выводит исключение в консоль, checked же сообщает об переполнении.
По умолчанию применяется uncheked, так как сообщение о переполнении не выводится, есил прямо об этом не попросить с помощью checked.

40. Для чего используется ключевое слово fixed? Каковы особенности его использования? 
Fixed Ключевое слово позволяет «закрепить» локальную систему в стеке, чтобы предотвратить их сбор или перемещение во время сборки мусора. Он используется для сценариев низкого уровня программирования.
